document.addEventListener('DOMContentLoaded', async function() {
  console.log('üîß Options page loaded');
  
  // Complete Google Translate language support
  const allLanguages = {
    'auto': 'üîç Auto-Detect',
    'af': 'üáøüá¶ Afrikaans',
    'sq': 'üá¶üá± Albanian', 
    'am': 'üá™üáπ Amharic',
    'ar': 'üá∏üá¶ Arabic',
    'hy': 'üá¶üá≤ Armenian',
    'as': 'üáÆüá≥ Assamese',
    'ay': 'üáßüá¥ Aymara',
    'az': 'üá¶üáø Azerbaijani',
    'bm': 'üá≤üá± Bambara',
    'eu': 'üá™üá∏ Basque',
    'be': 'üáßüáæ Belarusian',
    'bn': 'üáßüá© Bengali',
    'bho': 'üáÆüá≥ Bhojpuri',
    'bs': 'üáßüá¶ Bosnian',
    'bg': 'üáßüá¨ Bulgarian',
    'ca': 'üá™üá∏ Catalan',
    'ceb': 'üáµüá≠ Cebuano',
    'ny': 'üá≤üáº Chichewa',
    'zh': 'üá®üá≥ Chinese (Simplified)',
    'zh-cn': 'üá®üá≥ Chinese (Simplified)',
    'zh-tw': 'üáπüáº Chinese (Traditional)',
    'co': 'üá´üá∑ Corsican',
    'hr': 'üá≠üá∑ Croatian',
    'cs': 'üá®üáø Czech',
    'da': 'üá©üá∞ Danish',
    'dv': 'üá≤üáª Dhivehi',
    'doi': 'üáÆüá≥ Dogri',
    'nl': 'üá≥üá± Dutch',
    'en': 'üá∫üá∏ English',
    'eo': 'üåç Esperanto',
    'et': 'üá™üá™ Estonian',
    'ee': 'üá¨üá≠ Ewe',
    'tl': 'üáµüá≠ Filipino',
    'fi': 'üá´üáÆ Finnish',
    'fr': 'üá´üá∑ French',
    'fy': 'üá≥üá± Frisian',
    'gl': 'üá™üá∏ Galician',
    'ka': 'üá¨üá™ Georgian',
    'de': 'üá©üá™ German',
    'el': 'üá¨üá∑ Greek',
    'gn': 'üáµüáæ Guarani',
    'gu': 'üáÆüá≥ Gujarati',
    'ht': 'üá≠üáπ Haitian Creole',
    'ha': 'üá≥üá¨ Hausa',
    'haw': 'üá∫üá∏ Hawaiian',
    'iw': 'üáÆüá± Hebrew',
    'he': 'üáÆüá± Hebrew',
    'hi': 'üáÆüá≥ Hindi',
    'hmn': 'üá®üá≥ Hmong',
    'hu': 'üá≠üá∫ Hungarian',
    'is': 'üáÆüá∏ Icelandic',
    'ig': 'üá≥üá¨ Igbo',
    'ilo': 'üáµüá≠ Ilocano',
    'id': 'üáÆüá© Indonesian',
    'ga': 'üáÆüá™ Irish',
    'it': 'üáÆüáπ Italian',
    'ja': 'üáØüáµ Japanese',
    'jw': 'üáÆüá© Javanese',
    'kn': 'üáÆüá≥ Kannada',
    'kk': 'üá∞üáø Kazakh',
    'km': 'üá∞üá≠ Khmer',
    'rw': 'üá∑üáº Kinyarwanda',
    'gom': 'üáÆüá≥ Konkani',
    'ko': 'üá∞üá∑ Korean',
    'kri': 'üá∏üá± Krio',
    'ku': 'üáπüá∑ Kurdish (Kurmanji)',
    'ckb': 'üáÆüá∂ Kurdish (Sorani)',
    'ky': 'üá∞üá¨ Kyrgyz',
    'lo': 'üá±üá¶ Lao',
    'la': 'üáªüá¶ Latin',
    'lv': 'üá±üáª Latvian',
    'ln': 'üá®üá© Lingala',
    'lt': 'üá±üáπ Lithuanian',
    'lg': 'üá∫üá¨ Luganda',
    'lb': 'üá±üá∫ Luxembourgish',
    'mk': 'üá≤üá∞ Macedonian',
    'mai': 'üáÆüá≥ Maithili',
    'mg': 'üá≤üá¨ Malagasy',
    'ms': 'üá≤üáæ Malay',
    'ml': 'üáÆüá≥ Malayalam',
    'mt': 'üá≤üáπ Maltese',
    'mi': 'üá≥üáø Maori',
    'mr': 'üáÆüá≥ Marathi',
    'mni-mtei': 'üáÆüá≥ Meiteilon (Manipuri)',
    'lus': 'üáÆüá≥ Mizo',
    'mn': 'üá≤üá≥ Mongolian',
    'my': 'üá≤üá≤ Myanmar (Burmese)',
    'ne': 'üá≥üáµ Nepali',
    'no': 'üá≥üá¥ Norwegian',
    'or': 'üáÆüá≥ Odia (Oriya)',
    'om': 'üá™üáπ Oromo',
    'ps': 'üá¶üá´ Pashto',
    'fa': 'üáÆüá∑ Persian',
    'pl': 'üáµüá± Polish',
    'pt': 'üáµüáπ Portuguese',
    'pa': 'üáÆüá≥ Punjabi',
    'qu': 'üáµüá™ Quechua',
    'ro': 'üá∑üá¥ Romanian',
    'ru': 'üá∑üá∫ Russian',
    'sm': 'üáºüá∏ Samoan',
    'sa': 'üáÆüá≥ Sanskrit',
    'gd': 'üè¥ Scots Gaelic',
    'nso': 'üáøüá¶ Sepedi',
    'sr': 'üá∑üá∏ Serbian',
    'st': 'üá±üá∏ Sesotho',
    'sn': 'üáøüáº Shona',
    'sd': 'üáµüá∞ Sindhi',
    'si': 'üá±üá∞ Sinhala',
    'sk': 'üá∏üá∞ Slovak',
    'sl': 'üá∏üáÆ Slovenian',
    'so': 'üá∏üá¥ Somali',
    'es': 'üá™üá∏ Spanish',
    'su': 'üáÆüá© Sundanese',
    'sw': 'üá∞üá™ Swahili',
    'sv': 'üá∏üá™ Swedish',
    'tg': 'üáπüáØ Tajik',
    'ta': 'üáÆüá≥ Tamil',
    'tt': 'üá∑üá∫ Tatar',
    'te': 'üáÆüá≥ Telugu',
    'th': 'üáπüá≠ Thai',
    'ti': 'üá™üá∑ Tigrinya',
    'ts': 'üáøüá¶ Tsonga',
    'tr': 'üáπüá∑ Turkish',
    'tk': 'üáπüá≤ Turkmen',
    'ak': 'üá¨üá≠ Twi',
    'uk': 'üá∫üá¶ Ukrainian',
    'ur': 'üáµüá∞ Urdu',
    'ug': 'üá®üá≥ Uyghur',
    'uz': 'üá∫üáø Uzbek',
    'vi': 'üáªüá≥ Vietnamese',
    'cy': 'üè¥ Welsh',
    'xh': 'üáøüá¶ Xhosa',
    'yi': 'üáÆüá± Yiddish',
    'yo': 'üá≥üá¨ Yoruba',
    'zu': 'üáøüá¶ Zulu'
  };

  // Get all form elements
  const enableHelpMode = document.getElementById('enableHelpMode');
  const enableOutputMode = document.getElementById('enableOutputMode');
  const helpModeTarget = document.getElementById('helpModeTarget');
  const myTypingLanguage = document.getElementById('myTypingLanguage');
  const targetTranslationLanguage = document.getElementById('targetTranslationLanguage');
  const translationDelay = document.getElementById('translationDelay');
  const enableAllSites = document.getElementById('enableAllSites');
  const allowedSites = document.getElementById('allowedSites');
  const specificSitesGroup = document.getElementById('specificSitesGroup');
  const currentSite = document.getElementById('currentSite');
  const saveButton = document.getElementById('saveSettings');
  const status = document.getElementById('status');
  const languagesGrid = document.getElementById('languagesIUnderstand');
  const understandSearch = document.getElementById('understandSearch');

  // Populate language selects
  function populateLanguageSelect(selectElement, includeAuto = false) {
    selectElement.innerHTML = '';
    
    if (includeAuto) {
      const autoOption = document.createElement('option');
      autoOption.value = 'auto';
      autoOption.textContent = 'üîç Auto-Detect';
      selectElement.appendChild(autoOption);
    }
    
    Object.entries(allLanguages).forEach(([code, name]) => {
      const option = document.createElement('option');
      option.value = code;
      option.textContent = name;
      selectElement.appendChild(option);
    });
  }

  // Populate languages I understand grid
  function populateLanguagesGrid(filterText = '') {
    languagesGrid.innerHTML = '';
    
    Object.entries(allLanguages).forEach(([code, name]) => {
      if (filterText && !name.toLowerCase().includes(filterText.toLowerCase()) && 
          !code.toLowerCase().includes(filterText.toLowerCase())) {
        return;
      }
      
      const languageItem = document.createElement('div');
      languageItem.className = 'language-item';
      
      const checkbox = document.createElement('input');
      checkbox.type = 'checkbox';
      checkbox.value = code;
      checkbox.id = `understand-${code}`;
      
      const label = document.createElement('label');
      label.htmlFor = `understand-${code}`;
      label.textContent = name;
      label.style.cursor = 'pointer';
      label.style.fontSize = '13px';
      
      languageItem.appendChild(checkbox);
      languageItem.appendChild(label);
      languagesGrid.appendChild(languageItem);
    });
  }

  // Search functionality
  understandSearch.addEventListener('input', (e) => {
    populateLanguagesGrid(e.target.value);
  });

  // Initialize language selects and grid
  populateLanguageSelect(helpModeTarget);
  populateLanguageSelect(myTypingLanguage, true); // Include auto-detect for typing language
  populateLanguageSelect(targetTranslationLanguage);
  populateLanguagesGrid();

  // Show current site
  const tabs = await chrome.tabs.query({ active: true, currentWindow: true });
  if (tabs[0]) {
    const url = new URL(tabs[0].url);
    currentSite.textContent = url.hostname;
  }

  // Default settings with popular languages
  const defaultSettings = {
    enableHelpMode: true,
    languagesIUnderstand: ['en', 'es', 'fr', 'de', 'pl'], // Popular languages
    helpModeTarget: 'en',
    enableOutputMode: true,
    myTypingLanguage: 'auto', // Auto-detect typing language
    targetTranslationLanguage: 'es', // Spanish as default target language
    translationDelay: 600,
    enableAllSites: true,
    allowedSites: ['discord.com'] // Only Discord is fully tested
  };

  // Handle site configuration visibility
  enableAllSites.addEventListener('change', function() {
    specificSitesGroup.style.display = this.checked ? 'none' : 'block';
  });

  // Load current settings
  console.log('üìñ Loading settings...');
  try {
    const result = await chrome.storage.sync.get(['translatorSettings']);
    console.log('üîç Storage result:', result);
    
    const settings = result.translatorSettings || defaultSettings;
    console.log('‚öôÔ∏è Using settings:', settings);

    // Set form values
    enableHelpMode.checked = settings.enableHelpMode;
    enableOutputMode.checked = settings.enableOutputMode;
    helpModeTarget.value = settings.helpModeTarget;
    myTypingLanguage.value = settings.myTypingLanguage;
    targetTranslationLanguage.value = settings.targetTranslationLanguage;
    translationDelay.value = settings.translationDelay;
    
    // Site configuration
    enableAllSites.checked = settings.enableAllSites !== false;
    specificSitesGroup.style.display = enableAllSites.checked ? 'none' : 'block';
    
    if (settings.allowedSites && Array.isArray(settings.allowedSites)) {
      allowedSites.value = settings.allowedSites.join('\n');
    }

    // Set understood languages checkboxes
    const understoodLangs = settings.languagesIUnderstand || ['en'];
    console.log('üó£Ô∏è Languages I understand:', understoodLangs);
    
    understoodLangs.forEach(lang => {
      const checkbox = document.getElementById(`understand-${lang}`);
      if (checkbox) {
        checkbox.checked = true;
        console.log(`‚úÖ Checked language: ${lang}`);
      }
    });

    showStatus('‚úÖ Settings loaded successfully!', 'success');
    
  } catch (error) {
    console.error('‚ùå Error loading settings:', error);
    showStatus('‚ö†Ô∏è Using default settings. Storage error: ' + error.message, 'error');
    
    // Use defaults if loading fails
    enableHelpMode.checked = defaultSettings.enableHelpMode;
    enableOutputMode.checked = defaultSettings.enableOutputMode;
    helpModeTarget.value = defaultSettings.helpModeTarget;
    myTypingLanguage.value = defaultSettings.myTypingLanguage;
    targetTranslationLanguage.value = defaultSettings.targetTranslationLanguage;
    translationDelay.value = defaultSettings.translationDelay;
    enableAllSites.checked = defaultSettings.enableAllSites;
    allowedSites.value = defaultSettings.allowedSites.join('\n');
  }

  // Save settings with detailed logging
  saveButton.addEventListener('click', async function() {
    console.log('üíæ Save button clicked');
    showStatus('üíæ Saving settings...', 'info');
    
    try {
      // Get understood languages
      const languagesIUnderstand = [];
      const checkboxes = document.querySelectorAll('#languagesIUnderstand input[type="checkbox"]:checked');
      console.log('üîç Found checkboxes:', checkboxes.length);
      
      checkboxes.forEach(cb => {
        languagesIUnderstand.push(cb.value);
        console.log(`‚úÖ Language I understand: ${cb.value}`);
      });

      // Parse allowed sites
      const allowedSitesList = allowedSites.value
        .split('\n')
        .map(site => site.trim())
        .filter(site => site.length > 0);

      const newSettings = {
        // Help Mode
        enableHelpMode: enableHelpMode.checked,
        languagesIUnderstand: languagesIUnderstand,
        helpModeTarget: helpModeTarget.value,
        
        // Output Mode
        enableOutputMode: enableOutputMode.checked,
        myTypingLanguage: myTypingLanguage.value,
        targetTranslationLanguage: targetTranslationLanguage.value,
        translationDelay: parseInt(translationDelay.value),
        
        // Site Configuration
        enableAllSites: enableAllSites.checked,
        allowedSites: allowedSitesList
      };

      console.log('üíæ Saving settings:', newSettings);

      // Save to storage
      await chrome.storage.sync.set({ translatorSettings: newSettings });
      console.log('‚úÖ Settings saved to storage');
      
      // Verify the save worked
      const verification = await chrome.storage.sync.get(['translatorSettings']);
      console.log('üîç Verification read:', verification);
      
      if (verification.translatorSettings) {
        console.log('‚úÖ Save verification successful');
        
        // Notify all tabs about settings update
        try {
          const tabs = await chrome.tabs.query({});
          console.log(`üì¢ Notifying ${tabs.length} tabs about settings update`);
          
          let notifiedTabs = 0;
          for (const tab of tabs) {
            try {
              await chrome.tabs.sendMessage(tab.id, { action: 'settingsUpdated' });
              notifiedTabs++;
            } catch (tabError) {
              // Ignore errors for tabs that don't have our content script
              console.log(`‚ö†Ô∏è Could not notify tab ${tab.id}:`, tabError.message);
            }
          }
          
          console.log(`‚úÖ Successfully notified ${notifiedTabs} tabs`);
        } catch (tabError) {
          console.warn('‚ö†Ô∏è Error notifying tabs:', tabError);
        }
        
        showStatus(`‚úÖ Settings saved successfully! Supporting ${Object.keys(allLanguages).length} languages.`, 'success');
      } else {
        throw new Error('Settings verification failed');
      }
      
    } catch (error) {
      console.error('‚ùå Error saving settings:', error);
      showStatus('‚ùå Error saving settings: ' + error.message, 'error');
    }
  });

  function showStatus(message, type) {
    console.log(`üì¢ Status: ${message} (${type})`);
    status.textContent = message;
    status.className = `status ${type}`;
    status.style.display = 'block';
    
    if (type === 'info') {
      status.style.background = '#d1ecf1';
      status.style.color = '#0c5460';
    }
    
    // Auto-hide after delay (except for errors)
    if (type !== 'error') {
      setTimeout(() => {
        status.style.display = 'none';
      }, 5000);
    }
  }
  
  console.log(`üîß Options page setup complete with ${Object.keys(allLanguages).length} languages`);
});